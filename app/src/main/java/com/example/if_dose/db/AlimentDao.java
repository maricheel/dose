package com.example.if_dose.db;


import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "ALIMENT".
 */
public class AlimentDao extends AbstractDao<Aliment, Long> {

    public static final String TABLENAME = "ALIMENT";

    /**
     * Properties of entity Aliment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Glucide = new Property(2, Double.class, "glucide", false, "GLUCIDE");
        public final static Property Quantite = new Property(3, Double.class, "quantite", false, "QUANTITE");
        public final static Property Category_id = new Property(4, Long.class, "category_id", false, "CATEGORY_ID");
    }


    public AlimentDao(DaoConfig config) {
        super(config);
    }

    public AlimentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALIMENT\" (" + //
            "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
            "\"NAME\" TEXT," + // 1: name
            "\"GLUCIDE\" REAL," + // 2: glucide
            "\"QUANTITE\" REAL," + // 3: quantite
            "\"CATEGORY_ID\" INTEGER);"); // 4: category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALIMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Aliment entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Double glucide = entity.getGlucide();
        if (glucide != null) {
            stmt.bindDouble(3, glucide);
        }

        Double quantite = entity.getQuantite();
        if (quantite != null) {
            stmt.bindDouble(4, quantite);
        }

        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(5, category_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Aliment entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Double glucide = entity.getGlucide();
        if (glucide != null) {
            stmt.bindDouble(3, glucide);
        }

        Double quantite = entity.getQuantite();
        if (quantite != null) {
            stmt.bindDouble(4, quantite);
        }

        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(5, category_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Aliment readEntity(Cursor cursor, int offset) {
        Aliment entity = new Aliment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // glucide
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // quantite
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // category_id
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Aliment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGlucide(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setQuantite(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCategory_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(Aliment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Aliment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Aliment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}

